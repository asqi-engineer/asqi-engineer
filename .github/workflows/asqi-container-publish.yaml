name: Build and Push Docker Image

on:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: asqiengineer/asqi-engineer

jobs:
  build:
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Prepare platform variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build platform image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=oci,dest=/tmp/image-${{ env.PLATFORM_PAIR }}.tar

      - name: Upload platform image
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ env.PLATFORM_PAIR }}
          path: /tmp/image-${{ env.PLATFORM_PAIR }}.tar
          retention-days: 1

  test:
    runs-on: self-hosted
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image (local architecture)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: test-image:latest
          cache-from: type=gha

      - name: Smoke test
        run: |
          echo "Running smoke test with --help command..."
          docker run --rm test-image:latest --help

          # Verify exit code
          if [ $? -eq 0 ]; then
            echo "✅ Smoke test passed successfully!"
          else
            echo "❌ Smoke test failed - container returned non-zero exit code"
            exit 1
          fi

  publish:
    if: github.event_name != 'pull_request'
    runs-on: self-hosted
    needs: [build, test]
    environment:
      name: publish-docker-registry
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all platform images
        uses: actions/download-artifact@v4
        with:
          path: /tmp
          pattern: image-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Import and push multi-platform images
        id: push
        run: |
          # Import platform images
          docker buildx imagetools create \
            --dry-run \
            $(echo '${{ steps.meta.outputs.tags }}' | tr '\n' ' ' | sed 's/^/-t /' | sed 's/ / -t /g') \
            oci-archive:/tmp/image-linux-amd64.tar \
            oci-archive:/tmp/image-linux-arm64.tar

          # Actually push the images
          docker buildx imagetools create \
            $(echo '${{ steps.meta.outputs.tags }}' | tr '\n' ' ' | sed 's/^/-t /' | sed 's/ / -t /g') \
            oci-archive:/tmp/image-linux-amd64.tar \
            oci-archive:/tmp/image-linux-arm64.tar

          # Get digest for attestation
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} --format '{{.Manifest.Digest}}')
            echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
          fi

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Attest
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/attest-build-provenance@v3
        id: attest
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
